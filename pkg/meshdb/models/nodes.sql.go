// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: nodes.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const DeleteNode = `-- name: DeleteNode :exec
DELETE FROM nodes WHERE id = ?
`

func (q *Queries) DeleteNode(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, DeleteNode, id)
	return err
}

const EitherNodeExists = `-- name: EitherNodeExists :one
SELECT 1 FROM nodes WHERE id = ? OR id = ?
`

type EitherNodeExistsParams struct {
	ID   string `json:"id"`
	ID_2 string `json:"id_2"`
}

func (q *Queries) EitherNodeExists(ctx context.Context, arg EitherNodeExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, EitherNodeExists, arg.ID, arg.ID_2)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}

const GetNode = `-- name: GetNode :one
SELECT
    nodes.id AS id,
    nodes.public_key AS public_key,
    nodes.primary_endpoint AS primary_endpoint,
    nodes.wireguard_endpoints AS wireguard_endpoints,
    nodes.zone_awareness_id AS zone_awareness_id,
    nodes.grpc_port AS grpc_port,
    nodes.raft_port AS raft_port,
    nodes.network_ipv6 AS network_ipv6,
    COALESCE(leases.ipv4, '') AS private_address_v4,
    nodes.updated_at AS updated_at,
    nodes.created_at AS created_at
FROM nodes 
LEFT OUTER JOIN leases ON nodes.id = leases.node_id
WHERE nodes.id = ?
`

type GetNodeRow struct {
	ID                 string         `json:"id"`
	PublicKey          sql.NullString `json:"public_key"`
	PrimaryEndpoint    sql.NullString `json:"primary_endpoint"`
	WireguardEndpoints sql.NullString `json:"wireguard_endpoints"`
	ZoneAwarenessID    sql.NullString `json:"zone_awareness_id"`
	GrpcPort           int64          `json:"grpc_port"`
	RaftPort           int64          `json:"raft_port"`
	NetworkIpv6        sql.NullString `json:"network_ipv6"`
	PrivateAddressV4   string         `json:"private_address_v4"`
	UpdatedAt          time.Time      `json:"updated_at"`
	CreatedAt          time.Time      `json:"created_at"`
}

func (q *Queries) GetNode(ctx context.Context, id string) (GetNodeRow, error) {
	row := q.db.QueryRowContext(ctx, GetNode, id)
	var i GetNodeRow
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.PrimaryEndpoint,
		&i.WireguardEndpoints,
		&i.ZoneAwarenessID,
		&i.GrpcPort,
		&i.RaftPort,
		&i.NetworkIpv6,
		&i.PrivateAddressV4,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const GetNodeCount = `-- name: GetNodeCount :one
SELECT COUNT(*) AS count FROM nodes
`

func (q *Queries) GetNodeCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, GetNodeCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const InsertNode = `-- name: InsertNode :one
INSERT INTO nodes (
    id,
    public_key,
    primary_endpoint,
    wireguard_endpoints,
    zone_awareness_id,
    network_ipv6,
    grpc_port,
    raft_port,
    created_at,
    updated_at
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
ON CONFLICT (id) DO UPDATE SET
    public_key = EXCLUDED.public_key,
    primary_endpoint = EXCLUDED.primary_endpoint,
    wireguard_endpoints = EXCLUDED.wireguard_endpoints,
    zone_awareness_id = EXCLUDED.zone_awareness_id,
    network_ipv6 = EXCLUDED.network_ipv6,
    grpc_port = EXCLUDED.grpc_port,
    raft_port = EXCLUDED.raft_port,
    updated_at = EXCLUDED.updated_at
RETURNING id, public_key, raft_port, grpc_port, primary_endpoint, wireguard_endpoints, zone_awareness_id, network_ipv6, created_at, updated_at
`

type InsertNodeParams struct {
	ID                 string         `json:"id"`
	PublicKey          sql.NullString `json:"public_key"`
	PrimaryEndpoint    sql.NullString `json:"primary_endpoint"`
	WireguardEndpoints sql.NullString `json:"wireguard_endpoints"`
	ZoneAwarenessID    sql.NullString `json:"zone_awareness_id"`
	NetworkIpv6        sql.NullString `json:"network_ipv6"`
	GrpcPort           int64          `json:"grpc_port"`
	RaftPort           int64          `json:"raft_port"`
	CreatedAt          time.Time      `json:"created_at"`
	UpdatedAt          time.Time      `json:"updated_at"`
}

func (q *Queries) InsertNode(ctx context.Context, arg InsertNodeParams) (Node, error) {
	row := q.db.QueryRowContext(ctx, InsertNode,
		arg.ID,
		arg.PublicKey,
		arg.PrimaryEndpoint,
		arg.WireguardEndpoints,
		arg.ZoneAwarenessID,
		arg.NetworkIpv6,
		arg.GrpcPort,
		arg.RaftPort,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Node
	err := row.Scan(
		&i.ID,
		&i.PublicKey,
		&i.RaftPort,
		&i.GrpcPort,
		&i.PrimaryEndpoint,
		&i.WireguardEndpoints,
		&i.ZoneAwarenessID,
		&i.NetworkIpv6,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListNodeIDs = `-- name: ListNodeIDs :many
SELECT nodes.id AS id FROM nodes
`

func (q *Queries) ListNodeIDs(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, ListNodeIDs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var id string
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListNodes = `-- name: ListNodes :many
SELECT
    nodes.id AS id,
    nodes.public_key AS public_key,
    nodes.primary_endpoint AS primary_endpoint,
    nodes.wireguard_endpoints AS wireguard_endpoints,
    nodes.zone_awareness_id AS zone_awareness_id,
    nodes.grpc_port AS grpc_port,
    nodes.raft_port AS raft_port,
    nodes.network_ipv6 AS network_ipv6,
    COALESCE(leases.ipv4, '') AS private_address_v4,
    nodes.updated_at AS updated_at,
    nodes.created_at AS created_at
FROM nodes 
LEFT OUTER JOIN leases ON nodes.id = leases.node_id
`

type ListNodesRow struct {
	ID                 string         `json:"id"`
	PublicKey          sql.NullString `json:"public_key"`
	PrimaryEndpoint    sql.NullString `json:"primary_endpoint"`
	WireguardEndpoints sql.NullString `json:"wireguard_endpoints"`
	ZoneAwarenessID    sql.NullString `json:"zone_awareness_id"`
	GrpcPort           int64          `json:"grpc_port"`
	RaftPort           int64          `json:"raft_port"`
	NetworkIpv6        sql.NullString `json:"network_ipv6"`
	PrivateAddressV4   string         `json:"private_address_v4"`
	UpdatedAt          time.Time      `json:"updated_at"`
	CreatedAt          time.Time      `json:"created_at"`
}

func (q *Queries) ListNodes(ctx context.Context) ([]ListNodesRow, error) {
	rows, err := q.db.QueryContext(ctx, ListNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNodesRow
	for rows.Next() {
		var i ListNodesRow
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.PrimaryEndpoint,
			&i.WireguardEndpoints,
			&i.ZoneAwarenessID,
			&i.GrpcPort,
			&i.RaftPort,
			&i.NetworkIpv6,
			&i.PrivateAddressV4,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListNodesByZone = `-- name: ListNodesByZone :many
SELECT
    nodes.id AS id,
    nodes.public_key AS public_key,
    nodes.primary_endpoint AS primary_endpoint,
    nodes.wireguard_endpoints AS wireguard_endpoints,
    nodes.zone_awareness_id AS zone_awareness_id,
    nodes.grpc_port AS grpc_port,
    nodes.raft_port AS raft_port,
    nodes.network_ipv6 AS network_ipv6,
    COALESCE(leases.ipv4, '') AS private_address_v4,
    nodes.updated_at AS updated_at,
    nodes.created_at AS created_at
FROM nodes 
LEFT OUTER JOIN leases ON nodes.id = leases.node_id
WHERE nodes.zone_awareness_id = ?
`

type ListNodesByZoneRow struct {
	ID                 string         `json:"id"`
	PublicKey          sql.NullString `json:"public_key"`
	PrimaryEndpoint    sql.NullString `json:"primary_endpoint"`
	WireguardEndpoints sql.NullString `json:"wireguard_endpoints"`
	ZoneAwarenessID    sql.NullString `json:"zone_awareness_id"`
	GrpcPort           int64          `json:"grpc_port"`
	RaftPort           int64          `json:"raft_port"`
	NetworkIpv6        sql.NullString `json:"network_ipv6"`
	PrivateAddressV4   string         `json:"private_address_v4"`
	UpdatedAt          time.Time      `json:"updated_at"`
	CreatedAt          time.Time      `json:"created_at"`
}

func (q *Queries) ListNodesByZone(ctx context.Context, zoneAwarenessID sql.NullString) ([]ListNodesByZoneRow, error) {
	rows, err := q.db.QueryContext(ctx, ListNodesByZone, zoneAwarenessID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNodesByZoneRow
	for rows.Next() {
		var i ListNodesByZoneRow
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.PrimaryEndpoint,
			&i.WireguardEndpoints,
			&i.ZoneAwarenessID,
			&i.GrpcPort,
			&i.RaftPort,
			&i.NetworkIpv6,
			&i.PrivateAddressV4,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPublicNodes = `-- name: ListPublicNodes :many
SELECT
    nodes.id AS id,
    nodes.public_key AS public_key,
    nodes.primary_endpoint AS primary_endpoint,
    nodes.wireguard_endpoints AS wireguard_endpoints,
    nodes.zone_awareness_id AS zone_awareness_id,
    nodes.grpc_port AS grpc_port,
    nodes.raft_port AS raft_port,
    nodes.network_ipv6 AS network_ipv6,
    COALESCE(leases.ipv4, '') AS private_address_v4,
    nodes.updated_at AS updated_at,
    nodes.created_at AS created_at
FROM nodes 
LEFT OUTER JOIN leases ON nodes.id = leases.node_id
WHERE nodes.primary_endpoint IS NOT NULL
`

type ListPublicNodesRow struct {
	ID                 string         `json:"id"`
	PublicKey          sql.NullString `json:"public_key"`
	PrimaryEndpoint    sql.NullString `json:"primary_endpoint"`
	WireguardEndpoints sql.NullString `json:"wireguard_endpoints"`
	ZoneAwarenessID    sql.NullString `json:"zone_awareness_id"`
	GrpcPort           int64          `json:"grpc_port"`
	RaftPort           int64          `json:"raft_port"`
	NetworkIpv6        sql.NullString `json:"network_ipv6"`
	PrivateAddressV4   string         `json:"private_address_v4"`
	UpdatedAt          time.Time      `json:"updated_at"`
	CreatedAt          time.Time      `json:"created_at"`
}

func (q *Queries) ListPublicNodes(ctx context.Context) ([]ListPublicNodesRow, error) {
	rows, err := q.db.QueryContext(ctx, ListPublicNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPublicNodesRow
	for rows.Next() {
		var i ListPublicNodesRow
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.PrimaryEndpoint,
			&i.WireguardEndpoints,
			&i.ZoneAwarenessID,
			&i.GrpcPort,
			&i.RaftPort,
			&i.NetworkIpv6,
			&i.PrivateAddressV4,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const NodeExists = `-- name: NodeExists :one
SELECT 1 FROM nodes WHERE id = ?
`

func (q *Queries) NodeExists(ctx context.Context, id string) (int64, error) {
	row := q.db.QueryRowContext(ctx, NodeExists, id)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
