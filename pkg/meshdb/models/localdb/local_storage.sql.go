// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: local_storage.sql

package localdb

import (
	"context"
	"database/sql"
)

const DropRaftServers = `-- name: DropRaftServers :exec
DELETE FROM raft_servers
`

func (q *Queries) DropRaftServers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, DropRaftServers)
	return err
}

const GetCurrentRaftIndex = `-- name: GetCurrentRaftIndex :one
SELECT id, term, log_index FROM raft_index LIMIT 1
`

func (q *Queries) GetCurrentRaftIndex(ctx context.Context) (RaftIndex, error) {
	row := q.db.QueryRowContext(ctx, GetCurrentRaftIndex)
	var i RaftIndex
	err := row.Scan(&i.ID, &i.Term, &i.LogIndex)
	return i, err
}

const GetCurrentWireguardKey = `-- name: GetCurrentWireguardKey :one
SELECT id, private_key, expires_at FROM wireguard_key LIMIT 1
`

func (q *Queries) GetCurrentWireguardKey(ctx context.Context) (WireguardKey, error) {
	row := q.db.QueryRowContext(ctx, GetCurrentWireguardKey)
	var i WireguardKey
	err := row.Scan(&i.ID, &i.PrivateKey, &i.ExpiresAt)
	return i, err
}

const GetRaftServers = `-- name: GetRaftServers :many
SELECT id, suffrage, address FROM raft_servers
`

func (q *Queries) GetRaftServers(ctx context.Context) ([]RaftServer, error) {
	rows, err := q.db.QueryContext(ctx, GetRaftServers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RaftServer
	for rows.Next() {
		var i RaftServer
		if err := rows.Scan(&i.ID, &i.Suffrage, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertRaftServer = `-- name: InsertRaftServer :exec
INSERT INTO raft_servers (
    id,
    suffrage,
    address
) VALUES (?, ?, ?)
`

type InsertRaftServerParams struct {
	ID       string `json:"id"`
	Suffrage int64  `json:"suffrage"`
	Address  string `json:"address"`
}

func (q *Queries) InsertRaftServer(ctx context.Context, arg InsertRaftServerParams) error {
	_, err := q.db.ExecContext(ctx, InsertRaftServer, arg.ID, arg.Suffrage, arg.Address)
	return err
}

const SetCurrentRaftIndex = `-- name: SetCurrentRaftIndex :exec
INSERT OR REPLACE INTO raft_index (
    id,
    term,
    log_index
) VALUES (1, ?, ?)
`

type SetCurrentRaftIndexParams struct {
	Term     int64 `json:"term"`
	LogIndex int64 `json:"log_index"`
}

func (q *Queries) SetCurrentRaftIndex(ctx context.Context, arg SetCurrentRaftIndexParams) error {
	_, err := q.db.ExecContext(ctx, SetCurrentRaftIndex, arg.Term, arg.LogIndex)
	return err
}

const SetCurrentWireguardKey = `-- name: SetCurrentWireguardKey :exec
INSERT OR REPLACE INTO wireguard_key (
    id, 
    private_key, 
    expires_at
) VALUES (1, ?, ?)
`

type SetCurrentWireguardKeyParams struct {
	PrivateKey string       `json:"private_key"`
	ExpiresAt  sql.NullTime `json:"expires_at"`
}

func (q *Queries) SetCurrentWireguardKey(ctx context.Context, arg SetCurrentWireguardKeyParams) error {
	_, err := q.db.ExecContext(ctx, SetCurrentWireguardKey, arg.PrivateKey, arg.ExpiresAt)
	return err
}
