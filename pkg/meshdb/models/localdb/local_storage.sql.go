// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: local_storage.sql

package localdb

import (
	"context"
	"database/sql"
)

const GetCurrentRaftIndex = `-- name: GetCurrentRaftIndex :one
SELECT id, term, log_index FROM raft_index LIMIT 1
`

func (q *Queries) GetCurrentRaftIndex(ctx context.Context) (RaftIndex, error) {
	row := q.db.QueryRowContext(ctx, GetCurrentRaftIndex)
	var i RaftIndex
	err := row.Scan(&i.ID, &i.Term, &i.LogIndex)
	return i, err
}

const GetCurrentWireguardKey = `-- name: GetCurrentWireguardKey :one
SELECT id, private_key, expires_at FROM wireguard_key LIMIT 1
`

func (q *Queries) GetCurrentWireguardKey(ctx context.Context) (WireguardKey, error) {
	row := q.db.QueryRowContext(ctx, GetCurrentWireguardKey)
	var i WireguardKey
	err := row.Scan(&i.ID, &i.PrivateKey, &i.ExpiresAt)
	return i, err
}

const SetCurrentRaftIndex = `-- name: SetCurrentRaftIndex :exec
INSERT OR REPLACE INTO raft_index (
    id,
    term,
    log_index
) VALUES (1, ?, ?)
`

type SetCurrentRaftIndexParams struct {
	Term     int64 `json:"term"`
	LogIndex int64 `json:"log_index"`
}

func (q *Queries) SetCurrentRaftIndex(ctx context.Context, arg SetCurrentRaftIndexParams) error {
	_, err := q.db.ExecContext(ctx, SetCurrentRaftIndex, arg.Term, arg.LogIndex)
	return err
}

const SetCurrentWireguardKey = `-- name: SetCurrentWireguardKey :exec
INSERT OR REPLACE INTO wireguard_key (
    id, 
    private_key, 
    expires_at
) VALUES (1, ?, ?)
`

type SetCurrentWireguardKeyParams struct {
	PrivateKey string       `json:"private_key"`
	ExpiresAt  sql.NullTime `json:"expires_at"`
}

func (q *Queries) SetCurrentWireguardKey(ctx context.Context, arg SetCurrentWireguardKeyParams) error {
	_, err := q.db.ExecContext(ctx, SetCurrentWireguardKey, arg.PrivateKey, arg.ExpiresAt)
	return err
}
