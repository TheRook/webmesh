// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: raft_acls.sql

package raftdb

import (
	"context"
	"time"
)

const deleteRaftACL = `-- name: DeleteRaftACL :exec
DELETE FROM raft_acls WHERE name = ?
`

func (q *Queries) DeleteRaftACL(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, deleteRaftACL, name)
	return err
}

const getRaftACL = `-- name: GetRaftACL :one
SELECT name, nodes, voter, observer, created_at, updated_at FROM raft_acls WHERE name = ?
`

func (q *Queries) GetRaftACL(ctx context.Context, name string) (RaftAcl, error) {
	row := q.db.QueryRowContext(ctx, getRaftACL, name)
	var i RaftAcl
	err := row.Scan(
		&i.Name,
		&i.Nodes,
		&i.Voter,
		&i.Observer,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRaftACLs = `-- name: ListRaftACLs :many
SELECT name, nodes, voter, observer, created_at, updated_at FROM raft_acls
`

func (q *Queries) ListRaftACLs(ctx context.Context) ([]RaftAcl, error) {
	rows, err := q.db.QueryContext(ctx, listRaftACLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []RaftAcl
	for rows.Next() {
		var i RaftAcl
		if err := rows.Scan(
			&i.Name,
			&i.Nodes,
			&i.Voter,
			&i.Observer,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const putRaftACL = `-- name: PutRaftACL :exec
INSERT INTO raft_acls (
    name,
    nodes,
    voter,
    observer,
    created_at,
    updated_at
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
) 
ON CONFLICT (name) DO UPDATE SET
    nodes = EXCLUDED.nodes,
    voter = EXCLUDED.voter,
    observer = EXCLUDED.observer,
    updated_at = EXCLUDED.updated_at
`

type PutRaftACLParams struct {
	Name      string    `json:"name"`
	Nodes     string    `json:"nodes"`
	Voter     bool      `json:"voter"`
	Observer  bool      `json:"observer"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
}

func (q *Queries) PutRaftACL(ctx context.Context, arg PutRaftACLParams) error {
	_, err := q.db.ExecContext(ctx, putRaftACL,
		arg.Name,
		arg.Nodes,
		arg.Voter,
		arg.Observer,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
