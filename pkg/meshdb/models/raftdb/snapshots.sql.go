// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: snapshots.sql

package raftdb

import (
	"context"
	"database/sql"
	"time"
)

const dropLeases = `-- name: DropLeases :exec
DELETE FROM leases
`

func (q *Queries) DropLeases(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropLeases)
	return err
}

const dropMeshState = `-- name: DropMeshState :exec
DELETE FROM mesh_state
`

func (q *Queries) DropMeshState(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropMeshState)
	return err
}

const dropNodes = `-- name: DropNodes :exec
DELETE FROM nodes
`

func (q *Queries) DropNodes(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, dropNodes)
	return err
}

const dumpLeases = `-- name: DumpLeases :many
SELECT node_id, ipv4, created_at FROM leases
`

func (q *Queries) DumpLeases(ctx context.Context) ([]Lease, error) {
	rows, err := q.db.QueryContext(ctx, dumpLeases)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Lease
	for rows.Next() {
		var i Lease
		if err := rows.Scan(&i.NodeID, &i.Ipv4, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dumpMeshState = `-- name: DumpMeshState :many
SELECT "key", value FROM mesh_state
`

func (q *Queries) DumpMeshState(ctx context.Context) ([]MeshState, error) {
	rows, err := q.db.QueryContext(ctx, dumpMeshState)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []MeshState
	for rows.Next() {
		var i MeshState
		if err := rows.Scan(&i.Key, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const dumpNodes = `-- name: DumpNodes :many
SELECT id, public_key, raft_port, grpc_port, wireguard_port, primary_endpoint, endpoints, network_ipv6, created_at, updated_at FROM nodes
`

func (q *Queries) DumpNodes(ctx context.Context) ([]Node, error) {
	rows, err := q.db.QueryContext(ctx, dumpNodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Node
	for rows.Next() {
		var i Node
		if err := rows.Scan(
			&i.ID,
			&i.PublicKey,
			&i.RaftPort,
			&i.GrpcPort,
			&i.WireguardPort,
			&i.PrimaryEndpoint,
			&i.Endpoints,
			&i.NetworkIpv6,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const restoreLease = `-- name: RestoreLease :exec
INSERT INTO leases (
    node_id,
    ipv4,
    created_at
) VALUES (
    :node_id,
    :ipv4,
    :created_at
)
`

type RestoreLeaseParams struct {
	NodeID    string    `json:"node_id"`
	Ipv4      string    `json:"ipv4"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) RestoreLease(ctx context.Context, arg RestoreLeaseParams) error {
	_, err := q.db.ExecContext(ctx, restoreLease, arg.NodeID, arg.Ipv4, arg.CreatedAt)
	return err
}

const restoreMeshState = `-- name: RestoreMeshState :exec
INSERT INTO mesh_state (key, value) VALUES (:key, :value)
`

type RestoreMeshStateParams struct {
	Key   string `json:"key"`
	Value string `json:"value"`
}

func (q *Queries) RestoreMeshState(ctx context.Context, arg RestoreMeshStateParams) error {
	_, err := q.db.ExecContext(ctx, restoreMeshState, arg.Key, arg.Value)
	return err
}

const restoreNode = `-- name: RestoreNode :exec
INSERT INTO nodes (
    id,
    public_key,
    raft_port,
    grpc_port,
    wireguard_port,
    primary_endpoint,
    endpoints,
    network_ipv6,
    created_at,
    updated_at
) VALUES (
    :id,
    :public_key,
    :raft_port,
    :grpc_port,
    :wireguard_port,
    :primary_endpoint,
    :endpoints,
    :network_ipv6,
    :created_at,
    :updated_at
)
`

type RestoreNodeParams struct {
	ID              string         `json:"id"`
	PublicKey       sql.NullString `json:"public_key"`
	RaftPort        int64          `json:"raft_port"`
	GrpcPort        int64          `json:"grpc_port"`
	WireguardPort   int64          `json:"wireguard_port"`
	PrimaryEndpoint sql.NullString `json:"primary_endpoint"`
	Endpoints       sql.NullString `json:"endpoints"`
	NetworkIpv6     sql.NullString `json:"network_ipv6"`
	CreatedAt       time.Time      `json:"created_at"`
	UpdatedAt       time.Time      `json:"updated_at"`
}

func (q *Queries) RestoreNode(ctx context.Context, arg RestoreNodeParams) error {
	_, err := q.db.ExecContext(ctx, restoreNode,
		arg.ID,
		arg.PublicKey,
		arg.RaftPort,
		arg.GrpcPort,
		arg.WireguardPort,
		arg.PrimaryEndpoint,
		arg.Endpoints,
		arg.NetworkIpv6,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
