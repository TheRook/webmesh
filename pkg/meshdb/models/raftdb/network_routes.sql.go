// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: network_routes.sql

package raftdb

import (
	"context"
	"database/sql"
	"time"
)

const DeleteNetworkRoute = `-- name: DeleteNetworkRoute :exec
DELETE FROM network_routes WHERE name = ?
`

func (q *Queries) DeleteNetworkRoute(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, DeleteNetworkRoute, name)
	return err
}

const GetNetworkRoute = `-- name: GetNetworkRoute :one
SELECT name, nodes, dst_cidrs, next_hops, created_at, updated_at FROM network_routes WHERE name = ?
`

func (q *Queries) GetNetworkRoute(ctx context.Context, name string) (NetworkRoute, error) {
	row := q.db.QueryRowContext(ctx, GetNetworkRoute, name)
	var i NetworkRoute
	err := row.Scan(
		&i.Name,
		&i.Nodes,
		&i.DstCidrs,
		&i.NextHops,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListNetworkRoutes = `-- name: ListNetworkRoutes :many
SELECT name, nodes, dst_cidrs, next_hops, created_at, updated_at FROM network_routes
`

func (q *Queries) ListNetworkRoutes(ctx context.Context) ([]NetworkRoute, error) {
	rows, err := q.db.QueryContext(ctx, ListNetworkRoutes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkRoute
	for rows.Next() {
		var i NetworkRoute
		if err := rows.Scan(
			&i.Name,
			&i.Nodes,
			&i.DstCidrs,
			&i.NextHops,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListNetworkRoutesByDstCidr = `-- name: ListNetworkRoutesByDstCidr :many
SELECT name, nodes, dst_cidrs, next_hops, created_at, updated_at FROM network_routes WHERE dst_cidrs LIKE '%' || ? || '%'
`

func (q *Queries) ListNetworkRoutesByDstCidr(ctx context.Context, dstCidrs string) ([]NetworkRoute, error) {
	rows, err := q.db.QueryContext(ctx, ListNetworkRoutesByDstCidr, dstCidrs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkRoute
	for rows.Next() {
		var i NetworkRoute
		if err := rows.Scan(
			&i.Name,
			&i.Nodes,
			&i.DstCidrs,
			&i.NextHops,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListNetworkRoutesByNode = `-- name: ListNetworkRoutesByNode :many
SELECT name, nodes, dst_cidrs, next_hops, created_at, updated_at FROM network_routes WHERE nodes LIKE '%' || ? || '%'
`

func (q *Queries) ListNetworkRoutesByNode(ctx context.Context, nodes string) ([]NetworkRoute, error) {
	rows, err := q.db.QueryContext(ctx, ListNetworkRoutesByNode, nodes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkRoute
	for rows.Next() {
		var i NetworkRoute
		if err := rows.Scan(
			&i.Name,
			&i.Nodes,
			&i.DstCidrs,
			&i.NextHops,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const PutNetworkRoute = `-- name: PutNetworkRoute :exec
INSERT INTO network_routes (
    name,
    nodes,
    dst_cidrs,
    next_hops,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?
)
ON CONFLICT (name) DO UPDATE SET
    nodes = EXCLUDED.nodes,
    dst_cidrs = EXCLUDED.dst_cidrs,
    next_hops = EXCLUDED.next_hops,
    updated_at = EXCLUDED.updated_at
`

type PutNetworkRouteParams struct {
	Name      string         `json:"name"`
	Nodes     string         `json:"nodes"`
	DstCidrs  string         `json:"dst_cidrs"`
	NextHops  sql.NullString `json:"next_hops"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt time.Time      `json:"updated_at"`
}

func (q *Queries) PutNetworkRoute(ctx context.Context, arg PutNetworkRouteParams) error {
	_, err := q.db.ExecContext(ctx, PutNetworkRoute,
		arg.Name,
		arg.Nodes,
		arg.DstCidrs,
		arg.NextHops,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
