// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: edges.sql

package raftdb

import (
	"context"
)

const DeleteNodeEdge = `-- name: DeleteNodeEdge :exec
DELETE FROM node_edges WHERE src_node_id = ? AND dst_node_id = ?
`

type DeleteNodeEdgeParams struct {
	SrcNodeID string `json:"src_node_id"`
	DstNodeID string `json:"dst_node_id"`
}

func (q *Queries) DeleteNodeEdge(ctx context.Context, arg DeleteNodeEdgeParams) error {
	_, err := q.db.ExecContext(ctx, DeleteNodeEdge, arg.SrcNodeID, arg.DstNodeID)
	return err
}

const GetNodeEdges = `-- name: GetNodeEdges :many
SELECT dst_node_id FROM node_edges WHERE src_node_id = ?
`

func (q *Queries) GetNodeEdges(ctx context.Context, srcNodeID string) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, GetNodeEdges, srcNodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var dst_node_id string
		if err := rows.Scan(&dst_node_id); err != nil {
			return nil, err
		}
		items = append(items, dst_node_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const InsertNodeEdge = `-- name: InsertNodeEdge :exec
INSERT OR REPLACE INTO node_edges (src_node_id, dst_node_id) VALUES (?, ?)
`

type InsertNodeEdgeParams struct {
	SrcNodeID string `json:"src_node_id"`
	DstNodeID string `json:"dst_node_id"`
}

func (q *Queries) InsertNodeEdge(ctx context.Context, arg InsertNodeEdgeParams) error {
	_, err := q.db.ExecContext(ctx, InsertNodeEdge, arg.SrcNodeID, arg.DstNodeID)
	return err
}

const ListNodeEdges = `-- name: ListNodeEdges :many
SELECT src_node_id, dst_node_id FROM node_edges
`

func (q *Queries) ListNodeEdges(ctx context.Context) ([]NodeEdge, error) {
	rows, err := q.db.QueryContext(ctx, ListNodeEdges)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NodeEdge
	for rows.Next() {
		var i NodeEdge
		if err := rows.Scan(&i.SrcNodeID, &i.DstNodeID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const NodeEdgeExists = `-- name: NodeEdgeExists :one
SELECT 1 FROM node_edges WHERE src_node_id = ? AND dst_node_id = ?
`

type NodeEdgeExistsParams struct {
	SrcNodeID string `json:"src_node_id"`
	DstNodeID string `json:"dst_node_id"`
}

func (q *Queries) NodeEdgeExists(ctx context.Context, arg NodeEdgeExistsParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, NodeEdgeExists, arg.SrcNodeID, arg.DstNodeID)
	var column_1 int64
	err := row.Scan(&column_1)
	return column_1, err
}
