// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: leases.sql

package models

import (
	"context"
	"time"
)

const InsertNodeLease = `-- name: InsertNodeLease :one
INSERT OR REPLACE INTO leases (node_id, ipv4, created_at) VALUES (?, ?, ?)
RETURNING node_id, ipv4, created_at
`

type InsertNodeLeaseParams struct {
	NodeID    string    `json:"node_id"`
	Ipv4      string    `json:"ipv4"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) InsertNodeLease(ctx context.Context, arg InsertNodeLeaseParams) (Lease, error) {
	row := q.db.QueryRowContext(ctx, InsertNodeLease, arg.NodeID, arg.Ipv4, arg.CreatedAt)
	var i Lease
	err := row.Scan(&i.NodeID, &i.Ipv4, &i.CreatedAt)
	return i, err
}

const ListAllocatedIPv4 = `-- name: ListAllocatedIPv4 :many
SELECT ipv4 FROM leases WHERE ipv4 IS NOT NULL
`

func (q *Queries) ListAllocatedIPv4(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, ListAllocatedIPv4)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var ipv4 string
		if err := rows.Scan(&ipv4); err != nil {
			return nil, err
		}
		items = append(items, ipv4)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ReleaseNodeLease = `-- name: ReleaseNodeLease :exec
DELETE FROM leases WHERE node_id = ?
`

func (q *Queries) ReleaseNodeLease(ctx context.Context, nodeID string) error {
	_, err := q.db.ExecContext(ctx, ReleaseNodeLease, nodeID)
	return err
}
