// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: network_acls.sql

package models

import (
	"context"
	"database/sql"
	"time"
)

const DeleteNetworkACL = `-- name: DeleteNetworkACL :exec
DELETE FROM network_acls WHERE name = ?
`

func (q *Queries) DeleteNetworkACL(ctx context.Context, name string) error {
	_, err := q.db.ExecContext(ctx, DeleteNetworkACL, name)
	return err
}

const GetNetworkACL = `-- name: GetNetworkACL :one
SELECT name, priority, "action", src_node_ids, dst_node_ids, src_cidrs, dst_cidrs, protocols, ports, created_at, updated_at FROM network_acls WHERE name = ?
`

func (q *Queries) GetNetworkACL(ctx context.Context, name string) (NetworkAcl, error) {
	row := q.db.QueryRowContext(ctx, GetNetworkACL, name)
	var i NetworkAcl
	err := row.Scan(
		&i.Name,
		&i.Priority,
		&i.Action,
		&i.SrcNodeIds,
		&i.DstNodeIds,
		&i.SrcCidrs,
		&i.DstCidrs,
		&i.Protocols,
		&i.Ports,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const ListNetworkACLs = `-- name: ListNetworkACLs :many
SELECT name, priority, "action", src_node_ids, dst_node_ids, src_cidrs, dst_cidrs, protocols, ports, created_at, updated_at FROM network_acls ORDER BY priority DESC
`

func (q *Queries) ListNetworkACLs(ctx context.Context) ([]NetworkAcl, error) {
	rows, err := q.db.QueryContext(ctx, ListNetworkACLs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NetworkAcl
	for rows.Next() {
		var i NetworkAcl
		if err := rows.Scan(
			&i.Name,
			&i.Priority,
			&i.Action,
			&i.SrcNodeIds,
			&i.DstNodeIds,
			&i.SrcCidrs,
			&i.DstCidrs,
			&i.Protocols,
			&i.Ports,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const PutNetworkACL = `-- name: PutNetworkACL :exec
INSERT INTO network_acls (
    name,
    priority,
    action,
    src_node_ids,
    dst_node_ids,
    src_cidrs,
    dst_cidrs,
    protocols,
    ports,
    created_at,
    updated_at
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
ON CONFLICT (name) DO UPDATE SET
    priority = EXCLUDED.priority,
    action = EXCLUDED.action,
    src_node_ids = EXCLUDED.src_node_ids,
    dst_node_ids = EXCLUDED.dst_node_ids,
    src_cidrs = EXCLUDED.src_cidrs,
    dst_cidrs = EXCLUDED.dst_cidrs,
    protocols = EXCLUDED.protocols,
    ports = EXCLUDED.ports,
    updated_at = EXCLUDED.updated_at
`

type PutNetworkACLParams struct {
	Name       string         `json:"name"`
	Priority   int64          `json:"priority"`
	Action     int64          `json:"action"`
	SrcNodeIds sql.NullString `json:"src_node_ids"`
	DstNodeIds sql.NullString `json:"dst_node_ids"`
	SrcCidrs   sql.NullString `json:"src_cidrs"`
	DstCidrs   sql.NullString `json:"dst_cidrs"`
	Protocols  sql.NullString `json:"protocols"`
	Ports      sql.NullString `json:"ports"`
	CreatedAt  time.Time      `json:"created_at"`
	UpdatedAt  time.Time      `json:"updated_at"`
}

func (q *Queries) PutNetworkACL(ctx context.Context, arg PutNetworkACLParams) error {
	_, err := q.db.ExecContext(ctx, PutNetworkACL,
		arg.Name,
		arg.Priority,
		arg.Action,
		arg.SrcNodeIds,
		arg.DstNodeIds,
		arg.SrcCidrs,
		arg.DstCidrs,
		arg.Protocols,
		arg.Ports,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
