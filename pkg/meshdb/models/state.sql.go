// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: state.sql

package models

import (
	"context"
)

const GetIPv4Prefix = `-- name: GetIPv4Prefix :one
SELECT value FROM mesh_state WHERE key = 'IPv4Prefix'
`

func (q *Queries) GetIPv4Prefix(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, GetIPv4Prefix)
	var value string
	err := row.Scan(&value)
	return value, err
}

const GetIPv6Prefix = `-- name: GetIPv6Prefix :one
SELECT value FROM mesh_state WHERE key = 'IPv6Prefix'
`

func (q *Queries) GetIPv6Prefix(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, GetIPv6Prefix)
	var value string
	err := row.Scan(&value)
	return value, err
}

const SetIPv4Prefix = `-- name: SetIPv4Prefix :exec
INSERT into mesh_state (key, value) VALUES ('IPv4Prefix', ?)
ON CONFLICT (key) DO UPDATE SET value = excluded.value
`

func (q *Queries) SetIPv4Prefix(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, SetIPv4Prefix, value)
	return err
}

const SetIPv6Prefix = `-- name: SetIPv6Prefix :exec
INSERT into mesh_state (key, value) VALUES ('IPv6Prefix', ?)
ON CONFLICT (key) DO UPDATE SET value = excluded.value
`

func (q *Queries) SetIPv6Prefix(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, SetIPv6Prefix, value)
	return err
}
