// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: addresses.sql

package models

import (
	"context"
)

const GetNodePrivateRPCAddress = `-- name: GetNodePrivateRPCAddress :one
SELECT
    CAST(address AS TEXT) AS address
FROM node_private_rpc_addresses
WHERE node_id = ?
`

func (q *Queries) GetNodePrivateRPCAddress(ctx context.Context, nodeID string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, GetNodePrivateRPCAddress, nodeID)
	var address interface{}
	err := row.Scan(&address)
	return address, err
}

const GetNodePublicRPCAddress = `-- name: GetNodePublicRPCAddress :one
SELECT
    CAST(address AS TEXT) AS address
FROM node_public_rpc_addresses
WHERE node_id = ?
`

func (q *Queries) GetNodePublicRPCAddress(ctx context.Context, nodeID string) (interface{}, error) {
	row := q.db.QueryRowContext(ctx, GetNodePublicRPCAddress, nodeID)
	var address interface{}
	err := row.Scan(&address)
	return address, err
}

const ListPeerPrivateRPCAddresses = `-- name: ListPeerPrivateRPCAddresses :many
SELECT
    node_id AS node_id,
    CAST(address AS TEXT) AS address
FROM node_private_rpc_addresses
WHERE node_id <> ?
`

type ListPeerPrivateRPCAddressesRow struct {
	NodeID  string      `json:"node_id"`
	Address interface{} `json:"address"`
}

func (q *Queries) ListPeerPrivateRPCAddresses(ctx context.Context, nodeID string) ([]ListPeerPrivateRPCAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, ListPeerPrivateRPCAddresses, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPeerPrivateRPCAddressesRow
	for rows.Next() {
		var i ListPeerPrivateRPCAddressesRow
		if err := rows.Scan(&i.NodeID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPeerPublicRPCAddresses = `-- name: ListPeerPublicRPCAddresses :many
SELECT
    node_id AS node_id,
    CAST(address AS TEXT) AS address
FROM node_public_rpc_addresses
WHERE node_id <> ?
`

type ListPeerPublicRPCAddressesRow struct {
	NodeID  string      `json:"node_id"`
	Address interface{} `json:"address"`
}

func (q *Queries) ListPeerPublicRPCAddresses(ctx context.Context, nodeID string) ([]ListPeerPublicRPCAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, ListPeerPublicRPCAddresses, nodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPeerPublicRPCAddressesRow
	for rows.Next() {
		var i ListPeerPublicRPCAddressesRow
		if err := rows.Scan(&i.NodeID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPrivateRPCAddresses = `-- name: ListPrivateRPCAddresses :many
SELECT
    node_id AS node_id,
    CAST(address AS TEXT) AS address
FROM node_private_rpc_addresses
`

type ListPrivateRPCAddressesRow struct {
	NodeID  string      `json:"node_id"`
	Address interface{} `json:"address"`
}

func (q *Queries) ListPrivateRPCAddresses(ctx context.Context) ([]ListPrivateRPCAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, ListPrivateRPCAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPrivateRPCAddressesRow
	for rows.Next() {
		var i ListPrivateRPCAddressesRow
		if err := rows.Scan(&i.NodeID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ListPublicRPCAddresses = `-- name: ListPublicRPCAddresses :many
SELECT
    node_id AS node_id,
    CAST(address AS TEXT) AS address
FROM node_public_rpc_addresses
`

type ListPublicRPCAddressesRow struct {
	NodeID  string      `json:"node_id"`
	Address interface{} `json:"address"`
}

func (q *Queries) ListPublicRPCAddresses(ctx context.Context) ([]ListPublicRPCAddressesRow, error) {
	rows, err := q.db.QueryContext(ctx, ListPublicRPCAddresses)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPublicRPCAddressesRow
	for rows.Next() {
		var i ListPublicRPCAddressesRow
		if err := rows.Scan(&i.NodeID, &i.Address); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
