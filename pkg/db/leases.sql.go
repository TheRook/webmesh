// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: leases.sql

package db

import (
	"context"
	"time"
)

const insertNodeLease = `-- name: InsertNodeLease :one
INSERT INTO leases (
    node_id, 
    ipv4,
    expires_at
) VALUES (
    ?, 
    ?, 
    ?
) 
ON CONFLICT(node_id) DO UPDATE SET
    expires_at = EXCLUDED.expires_at
RETURNING node_id, ipv4, created_at, expires_at
`

type InsertNodeLeaseParams struct {
	NodeID    string    `json:"node_id"`
	Ipv4      string    `json:"ipv4"`
	ExpiresAt time.Time `json:"expires_at"`
}

func (q *Queries) InsertNodeLease(ctx context.Context, arg InsertNodeLeaseParams) (Lease, error) {
	row := q.db.QueryRowContext(ctx, insertNodeLease, arg.NodeID, arg.Ipv4, arg.ExpiresAt)
	var i Lease
	err := row.Scan(
		&i.NodeID,
		&i.Ipv4,
		&i.CreatedAt,
		&i.ExpiresAt,
	)
	return i, err
}

const listAllocatedIPv4 = `-- name: ListAllocatedIPv4 :many
SELECT ipv4 FROM leases WHERE ipv4 IS NOT NULL
`

func (q *Queries) ListAllocatedIPv4(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, listAllocatedIPv4)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var ipv4 string
		if err := rows.Scan(&ipv4); err != nil {
			return nil, err
		}
		items = append(items, ipv4)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const releaseNodeLease = `-- name: ReleaseNodeLease :exec
DELETE FROM leases WHERE node_id = ?
`

func (q *Queries) ReleaseNodeLease(ctx context.Context, nodeID string) error {
	_, err := q.db.ExecContext(ctx, releaseNodeLease, nodeID)
	return err
}

const renewNodeLease = `-- name: RenewNodeLease :exec
UPDATE leases SET expires_at = ? WHERE node_id = ?
`

type RenewNodeLeaseParams struct {
	ExpiresAt time.Time `json:"expires_at"`
	NodeID    string    `json:"node_id"`
}

func (q *Queries) RenewNodeLease(ctx context.Context, arg RenewNodeLeaseParams) error {
	_, err := q.db.ExecContext(ctx, renewNodeLease, arg.ExpiresAt, arg.NodeID)
	return err
}
