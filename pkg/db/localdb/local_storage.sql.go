// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: local_storage.sql

package localdb

import (
	"context"
)

const getCurrentWireguardKey = `-- name: GetCurrentWireguardKey :one
SELECT value FROM node_local WHERE key = 'WireguardKey'
`

func (q *Queries) GetCurrentWireguardKey(ctx context.Context) (string, error) {
	row := q.db.QueryRowContext(ctx, getCurrentWireguardKey)
	var value string
	err := row.Scan(&value)
	return value, err
}

const getRaftState = `-- name: GetRaftState :one
SELECT 
    COALESCE((
        SELECT value FROM node_local WHERE key = 'CurrentRaftTerm'
    ), '') AS CurrentRaftTerm,
    COALESCE((
        SELECT value FROM node_local WHERE key = 'LastAppliedRaftIndex'
    ), '') AS LastAppliedRaftIndex
`

type GetRaftStateRow struct {
	CurrentRaftTerm      interface{} `json:"CurrentRaftTerm"`
	LastAppliedRaftIndex interface{} `json:"LastAppliedRaftIndex"`
}

func (q *Queries) GetRaftState(ctx context.Context) (GetRaftStateRow, error) {
	row := q.db.QueryRowContext(ctx, getRaftState)
	var i GetRaftStateRow
	err := row.Scan(&i.CurrentRaftTerm, &i.LastAppliedRaftIndex)
	return i, err
}

const setCurrentRaftTerm = `-- name: SetCurrentRaftTerm :exec
INSERT into node_local (key, value) VALUES ('CurrentRaftTerm', ?)
ON CONFLICT (key) DO UPDATE SET value = excluded.value
`

func (q *Queries) SetCurrentRaftTerm(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, setCurrentRaftTerm, value)
	return err
}

const setCurrentWireguardKey = `-- name: SetCurrentWireguardKey :exec
INSERT into node_local (key, value) VALUES ('WireguardKey', ?)
ON CONFLICT (key) DO UPDATE SET value = excluded.value
`

func (q *Queries) SetCurrentWireguardKey(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, setCurrentWireguardKey, value)
	return err
}

const setLastAppliedRaftIndex = `-- name: SetLastAppliedRaftIndex :exec
INSERT into node_local (key, value) VALUES ('LastAppliedRaftIndex', ?)
ON CONFLICT (key) DO UPDATE SET value = excluded.value
`

func (q *Queries) SetLastAppliedRaftIndex(ctx context.Context, value string) error {
	_, err := q.db.ExecContext(ctx, setLastAppliedRaftIndex, value)
	return err
}
